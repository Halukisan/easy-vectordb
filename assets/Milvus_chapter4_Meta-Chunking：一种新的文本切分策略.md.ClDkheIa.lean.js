import{_ as t,c as l,o as e,ag as a,j as s,a as i}from"./chunks/framework.DUcTBpf6.js";const r="/easy-vectordb/images/metac.png",p="/easy-vectordb/images/RAGyinru.png",o="/easy-vectordb/images/PPLhou.png",h="/easy-vectordb/images/metachunkingpic.png",m=JSON.parse('{"title":"Meta-Chunking","description":"","frontmatter":{},"headers":[],"relativePath":"Milvus/chapter4/Meta-Chunking：一种新的文本切分策略.md","filePath":"Milvus/chapter4/Meta-Chunking：一种新的文本切分策略.md","lastUpdated":1756795290000}'),k={name:"Milvus/chapter4/Meta-Chunking：一种新的文本切分策略.md"};function g(d,n,$,c,_,u){return e(),l("div",null,[...n[0]||(n[0]=[a("",33),s("p",null,[i("现在，我们通过公式来更加详细的了解PPL，首先，回忆一下分块的"),s("strong",null,"核心目标："),i(" 将长文本分割成多个"),s("strong",null,"连贯"),i("的语块 ("),s("code",null,"X1, X2, ..., Xk"),i(")，每个语块由连续的句子组成 ("),s("code",null,"xi"),i(")，并且最终语块的长度尽可能满足用户需求。 $$ \\text{PPL}"),s("em",{k:"1"},"M(x_i) = \\sum"),i("^{K} \\frac{\\text{PPL}"),s("em",null,"M(t_k^i ,|, t"),i("{\\lt k}^i, t_{\\lt i})}{K} $$ 我们来看懂这个公式：")],-1),a("",159)])])}const F=t(k,[["render",g]]);export{m as __pageData,F as default};
